// BASE SETUP// =======================================// Call the Packagesvar express     = require('express');var app         = express();var bodyParser  = require('body-parser');var morgan      = require('morgan');var mongoose    = require('mongoose');var port        = process.env.port || 8080;// Call User modelsvar User = require('./app/models/user');// connect to our database (hosted on modulus.io)mongoose.connect('mongodb://localhost:27017/baseapp');// APP CONFIGURATION-------------------------// use body parser so we can grab information from POST requestsapp.use(bodyParser.urlencoded({ extended: true}));app.use(bodyParser.json());// configure app to handle CORS requestsapp.use(function(req, res, next){  res.setHeader('Access-Control-Allow-Origin', '*');  res.setHeader('Access-Control-Allow-Methods', 'GET, POST');  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type, \Authorization');  next();});//log all requests to the consoleapp.use(morgan('dev'));// ROUTES FOR OUR API// =============================// basic route for the home pageapp.get('/', function(req, res) {  res.send('Welcome to the home page!');});// get an instance of the express routervar apiRouter = express.Router();apiRouter.use(function(req, res, next) {  // Do Logging  console.log('Someone Just Used Our api');  // we'll add more to the middleware  // this is where we authenticate users  next();  //make sure to go to the next route and not to stop here});apiRouter.route('/users')    //create a user ()    .post(function(req, res){      //create the instance of the user modal      var user = new User();      //set the users information comes from the requests      user.name = req.body.name;      user.username = req.body.username;      user.password = req.body.password;      //save the user and check for errors      user.save(function(err){        if (err) {          //duplicate entry          if (err.code == 11000)            return res.json({ success: false, message: "A user with that username already exists"});          else              return res.send(err);        }      res.json({ message: 'User Created!'});    });  })  .get(function(req, res){    User.find(function(err, users){      if (err) res.send(err);      //return the users      res.json(users);    });  });apiRouter.route('/users/:user_id')  // get the user with that id  .get(function(req, res){    User.findById(req.params.user_id, function(err, user){      if (err) res.send(err);      //return the user      res.json(user);    });  })  .put(function(req,res){    //use our user model to find what we want    User.findById(req.params.user_id, function(err, user) {      if (err) res.send(err);      //update new users info only if it is new      if (req.body.name) user.name = req.body.name;      if (req.body.username) user.username = req.body.username;      if (req.body.password) user.password = req.body.password;      //save the user      user.save(function(err){        if (err) res.send(err);        //return a message        res.json({ message: 'User Updated!'});      });    });  })// test route to make sure everything is working// accessed at GET http://localhost:8080/apiapiRouter.get('/', function(req, res){  res.json({ message: 'hooray! welcome to our api!'});});// more routes for our API will happen here// REGISTER OUR ROUTES -------------------------------// all of our routes will be prefixed with /apiapp.use('/api', apiRouter);// START THE SERVER// ===============================app.listen(port);console.log('Magic happens on port ' + port);